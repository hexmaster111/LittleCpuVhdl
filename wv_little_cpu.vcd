$version Generated by VerilatedVcd $end
$date Sun Apr 28 16:33:18 2024
 $end
$timescale   1ps $end

 $scope module TOP $end
  $var wire  1 : i_clk $end
  $var wire  1 ; i_rst $end
  $scope module $unit $end
   $var wire 32 R ALU_ADD [31:0] $end
   $var wire 32 Q ALU_XOR [31:0] $end
   $var wire  8 P OP_add [7:0] $end
   $var wire  8 B OP_xor [7:0] $end
  $upscope $end
  $scope module little_cpu $end
   $var wire 32 @ BITS [31:0] $end
   $var wire  1 0 acc_zero $end
   $var wire  8 / accum_out [7:0] $end
   $var wire  1 1 alu_ctrl $end
   $var wire  8 4 alu_out_wire [7:0] $end
   $var wire  1 : i_clk $end
   $var wire  1 ; i_rst $end
   $var wire 16 - inst_reg_out [15:0] $end
   $var wire  1 & ld_acc $end
   $var wire  1 ' ld_ir $end
   $var wire  1 $ ld_mar $end
   $var wire  1 # ld_mdr $end
   $var wire  1 % ld_pc $end
   $var wire  8 3 mar_to_mem_module_wire [7:0] $end
   $var wire 16 , mdr_reg_out [15:0] $end
   $var wire  1 A mem_rw $end
   $var wire 16 > mem_to_mdr_reg_wire [15:0] $end
   $var wire  1 * mx_accum_ab $end
   $var wire  8 = mx_ir_pc_mem_wire [7:0] $end
   $var wire  1 ) mx_mar_ab $end
   $var wire  1 ( mx_pc_ab $end
   $var wire  8 ? mx_to_accum_wire [7:0] $end
   $var wire  8 2 p1_mx_wire [7:0] $end
   $var wire  8 < pc_mx_wire [7:0] $end
   $var wire  8 . pc_out [7:0] $end
   $scope module accum $end
    $var wire 32 N BITS [31:0] $end
    $var wire  8 ? i_data [7:0] $end
    $var wire  1 & i_ld $end
    $var wire  8 / o_data [7:0] $end
    $var wire  1 0 o_zero $end
    $var wire  8 / value [7:0] $end
   $upscope $end
   $scope module alu $end
    $var wire 32 N BITS [31:0] $end
    $var wire  8 9 i_l [7:0] $end
    $var wire  1 1 i_op $end
    $var wire  8 / i_r [7:0] $end
    $var wire  8 4 o_out [7:0] $end
   $upscope $end
   $scope module ctrl $end
    $var wire  8 I S_Exe_Alu_0 [7:0] $end
    $var wire  8 J S_Exe_Alu_1 [7:0] $end
    $var wire  8 K S_Exe_Alu_2 [7:0] $end
    $var wire  8 L S_Exe_Alu_3 [7:0] $end
    $var wire  8 M S_Exe_Alu_4 [7:0] $end
    $var wire  8 B S_Fetch_0 [7:0] $end
    $var wire  8 C S_Fetch_1 [7:0] $end
    $var wire  8 D S_Fetch_2 [7:0] $end
    $var wire  8 E S_Fetch_3 [7:0] $end
    $var wire  8 F S_Fetch_4 [7:0] $end
    $var wire  8 G S_Inc_0 [7:0] $end
    $var wire  8 H S_Inc_1 [7:0] $end
    $var wire  8 + current_state [7:0] $end
    $var wire  1 0 i_acc_zero $end
    $var wire  1 : i_clk $end
    $var wire  8 5 i_opcode [7:0] $end
    $var wire  1 ; i_rst $end
    $var wire  8 6 next_state [7:0] $end
    $var wire  1 1 o_alu_ctrl $end
    $var wire  1 & o_ld_acc $end
    $var wire  1 ' o_ld_ir $end
    $var wire  1 $ o_ld_mar $end
    $var wire  1 # o_ld_mdr $end
    $var wire  1 % o_ld_pc $end
    $var wire  1 A o_mem_rw $end
    $var wire  1 ( o_mux_ir_p1 $end
    $var wire  1 * o_mux_mdr_alur $end
    $var wire  1 ) o_mux_pc_ird $end
   $upscope $end
   $scope module inst_reg $end
    $var wire 32 @ BITS [31:0] $end
    $var wire 16 , i_data [15:0] $end
    $var wire  1 ' i_ld $end
    $var wire 16 - o_data [15:0] $end
    $var wire 16 - value [15:0] $end
   $upscope $end
   $scope module mem $end
    $var wire 32 @ BITS [31:0] $end
    $var wire 32 O MEMADDRS [31:0] $end
    $var wire  8 3 i_addr [7:0] $end
    $var wire  1 : i_clk $end
    $var wire 16 8 i_data [15:0] $end
    $var wire  1 A i_rw $end
    $var wire 16 > o_data [15:0] $end
   $upscope $end
   $scope module mem_addr_reg $end
    $var wire 32 N BITS [31:0] $end
    $var wire  8 = i_data [7:0] $end
    $var wire  1 $ i_ld $end
    $var wire  8 3 o_data [7:0] $end
    $var wire  8 3 value [7:0] $end
   $upscope $end
   $scope module mem_data_reg $end
    $var wire 32 @ BITS [31:0] $end
    $var wire 16 > i_data [15:0] $end
    $var wire  1 # i_ld $end
    $var wire 16 , o_data [15:0] $end
    $var wire 16 , value [15:0] $end
   $upscope $end
   $scope module mx_alur_mdr $end
    $var wire 32 N BITS [31:0] $end
    $var wire  8 4 i_a [7:0] $end
    $var wire  1 * i_ab_sw $end
    $var wire  8 9 i_b [7:0] $end
    $var wire  8 ? o_out [7:0] $end
   $upscope $end
   $scope module mx_ir_pc $end
    $var wire 32 N BITS [31:0] $end
    $var wire  8 7 i_a [7:0] $end
    $var wire  1 ) i_ab_sw $end
    $var wire  8 . i_b [7:0] $end
    $var wire  8 = o_out [7:0] $end
   $upscope $end
   $scope module mx_p1_inst_rg $end
    $var wire 32 N BITS [31:0] $end
    $var wire  8 2 i_a [7:0] $end
    $var wire  1 ( i_ab_sw $end
    $var wire  8 7 i_b [7:0] $end
    $var wire  8 < o_out [7:0] $end
   $upscope $end
   $scope module pc_plus_one $end
    $var wire 32 N BITS [31:0] $end
    $var wire  8 . in [7:0] $end
    $var wire  8 2 out [7:0] $end
   $upscope $end
   $scope module prog_ctr $end
    $var wire 32 N BITS [31:0] $end
    $var wire  8 < i_data [7:0] $end
    $var wire  1 % i_ld $end
    $var wire  8 . o_data [7:0] $end
    $var wire  8 . value [7:0] $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
0#
0$
0%
0&
0'
0(
1)
0*
b00000001 +
b0000000000000000 ,
b0000000000000000 -
b00000000 .
b00000000 /
10
01
b00000001 2
b00000000 3
b00000000 4
b00000000 5
b00000010 6
b00000000 7
b0000000000000000 8
b00000000 9
1:
0;
b00000000 <
b00000000 =
b0000000001111011 >
b00000000 ?
b00000000000000000000000000010000 @
0A
b00000001 B
b00000010 C
b00000011 D
b00000100 E
b00000101 F
b00001010 G
b00001011 H
b00011001 I
b00011010 J
b00011011 K
b00011100 L
b00011101 M
b00000000000000000000000000001000 N
b00000000000000000000000100000000 O
b00000000 P
b00000000000000000000000000000001 Q
b00000000000000000000000000000000 R
#1
0:
#2
1$
b00000010 +
b00000011 6
1:
#3
0:
#4
1#
0$
0)
b00000011 +
b0000000001111011 ,
b00000100 6
1:
#5
0:
#6
0#
1'
b00000100 +
b0000000001111011 -
b01111011 5
b00000101 6
1:
#7
0:
#8
0'
b00000101 +
b00000001 6
1:
#9
0:
#10
1)
b00000001 +
b00000010 6
1:
#11
0:
#12
1$
b00000010 +
b00000011 6
1:
#13
0:
#14
1#
0$
0)
b00000011 +
b00000100 6
1:
#15
0:
#16
0#
1'
b00000100 +
b00000101 6
1:
#17
0:
#18
0'
b00000101 +
b00000001 6
1:
#19
0:
#20
1)
b00000001 +
b00000010 6
1:
#21
0:
#22
1$
b00000010 +
b00000011 6
1:
#23
0:
#24
1#
0$
0)
b00000011 +
b00000100 6
1:
#25
0:
#26
0#
1'
b00000100 +
b00000101 6
1:
#27
0:
#28
0'
b00000101 +
b00000001 6
1:
#29
0:
#30
1)
b00000001 +
b00000010 6
1:
#31
0:
#32
1$
b00000010 +
b00000011 6
1:
#33
0:
#34
1#
0$
0)
b00000011 +
b00000100 6
1:
#35
0:
#36
0#
1'
b00000100 +
b00000101 6
1:
#37
0:
#38
0'
b00000101 +
b00000001 6
1:
#39
0:
#40
1)
b00000001 +
b00000010 6
1:
#41
0:
#42
1$
b00000010 +
b00000011 6
1:
#43
0:
#44
1#
0$
0)
b00000011 +
b00000100 6
1:
#45
0:
#46
0#
1'
b00000100 +
b00000101 6
1:
#47
0:
#48
0'
b00000101 +
b00000001 6
1:
#49
0:
#50
1)
b00000001 +
b00000010 6
1:
#51
0:
#52
1$
b00000010 +
b00000011 6
1:
#53
0:
#54
1#
0$
0)
b00000011 +
b00000100 6
1:
#55
0:
#56
0#
1'
b00000100 +
b00000101 6
1:
#57
0:
#58
0'
b00000101 +
b00000001 6
1:
#59
0:
#60
1)
b00000001 +
b00000010 6
1:
#61
0:
#62
1$
b00000010 +
b00000011 6
1:
#63
0:
#64
1#
0$
0)
b00000011 +
b00000100 6
1:
#65
0:
#66
0#
1'
b00000100 +
b00000101 6
1:
#67
0:
#68
0'
b00000101 +
b00000001 6
1:
#69
0:
#70
1)
b00000001 +
b00000010 6
1:
#71
0:
#72
1$
b00000010 +
b00000011 6
1:
#73
0:
#74
1#
0$
0)
b00000011 +
b00000100 6
1:
#75
0:
#76
0#
1'
b00000100 +
b00000101 6
1:
#77
0:
#78
0'
b00000101 +
b00000001 6
1:
#79
0:
#80
1)
b00000001 +
b00000010 6
1:
#81
0:
#82
1$
b00000010 +
b00000011 6
1:
#83
0:
#84
1#
0$
0)
b00000011 +
b00000100 6
1:
#85
0:
#86
0#
1'
b00000100 +
b00000101 6
1:
#87
0:
#88
0'
b00000101 +
b00000001 6
1:
#89
0:
#90
1)
b00000001 +
b00000010 6
1:
#91
0:
#92
1$
b00000010 +
b00000011 6
1:
#93
0:
#94
1#
0$
0)
b00000011 +
b00000100 6
1:
#95
0:
#96
0#
1'
b00000100 +
b00000101 6
1:
#97
0:
#98
0'
b00000101 +
b00000001 6
1:
#99
0:
#100
1)
b00000001 +
b00000010 6
1:
#101
0:
#102
1$
b00000010 +
b00000011 6
1:
#103
0:
#104
1#
0$
0)
b00000011 +
b00000100 6
1:
#105
0:
#106
0#
1'
b00000100 +
b00000101 6
1:
#107
0:
#108
0'
b00000101 +
b00000001 6
1:
#109
0:
#110
1)
b00000001 +
b00000010 6
1:
#111
0:
#112
1$
b00000010 +
b00000011 6
1:
#113
0:
#114
1#
0$
0)
b00000011 +
b00000100 6
1:
#115
0:
#116
0#
1'
b00000100 +
b00000101 6
1:
#117
0:
#118
0'
b00000101 +
b00000001 6
1:
#119
0:
#120
1)
b00000001 +
b00000010 6
1:
#121
0:
#122
1$
b00000010 +
b00000011 6
1:
#123
0:
#124
1#
0$
0)
b00000011 +
b00000100 6
1:
#125
0:
#126
0#
1'
b00000100 +
b00000101 6
1:
#127
0:
#128
0'
b00000101 +
b00000001 6
1:
#129
0:
#130
1)
b00000001 +
b00000010 6
1:
#131
0:
#132
1$
b00000010 +
b00000011 6
1:
#133
0:
#134
1#
0$
0)
b00000011 +
b00000100 6
1:
#135
0:
#136
0#
1'
b00000100 +
b00000101 6
1:
#137
0:
#138
0'
b00000101 +
b00000001 6
1:
#139
0:
#140
1)
b00000001 +
b00000010 6
1:
#141
0:
#142
1$
b00000010 +
b00000011 6
1:
#143
0:
#144
1#
0$
0)
b00000011 +
b00000100 6
1:
#145
0:
#146
0#
1'
b00000100 +
b00000101 6
1:
#147
0:
#148
0'
b00000101 +
b00000001 6
1:
#149
0:
#150
1)
b00000001 +
b00000010 6
1:
#151
0:
#152
1$
b00000010 +
b00000011 6
1:
#153
0:
#154
1#
0$
0)
b00000011 +
b00000100 6
1:
#155
0:
#156
0#
1'
b00000100 +
b00000101 6
1:
#157
0:
#158
0'
b00000101 +
b00000001 6
1:
#159
0:
#160
1)
b00000001 +
b00000010 6
1:
#161
0:
#162
1$
b00000010 +
b00000011 6
1:
#163
0:
#164
1#
0$
0)
b00000011 +
b00000100 6
1:
#165
0:
#166
0#
1'
b00000100 +
b00000101 6
1:
#167
0:
#168
0'
b00000101 +
b00000001 6
1:
#169
0:
#170
1)
b00000001 +
b00000010 6
1:
#171
0:
#172
1$
b00000010 +
b00000011 6
1:
#173
0:
#174
1#
0$
0)
b00000011 +
b00000100 6
1:
#175
0:
#176
0#
1'
b00000100 +
b00000101 6
1:
#177
0:
#178
0'
b00000101 +
b00000001 6
1:
#179
0:
#180
1)
b00000001 +
b00000010 6
1:
#181
0:
#182
1$
b00000010 +
b00000011 6
1:
#183
0:
#184
1#
0$
0)
b00000011 +
b00000100 6
1:
#185
0:
#186
0#
1'
b00000100 +
b00000101 6
1:
#187
0:
#188
0'
b00000101 +
b00000001 6
1:
#189
0:
#190
1)
b00000001 +
b00000010 6
1:
#191
0:
#192
1$
b00000010 +
b00000011 6
1:
#193
0:
#194
1#
0$
0)
b00000011 +
b00000100 6
1:
#195
0:
#196
0#
1'
b00000100 +
b00000101 6
1:
#197
0:
#198
0'
b00000101 +
b00000001 6
1:
#199
0:
#200
1)
b00000001 +
b00000010 6
1:
#201
0:
#202
1$
b00000010 +
b00000011 6
1:
#203
0:
#204
1#
0$
0)
b00000011 +
b00000100 6
1:
#205
0:
#206
0#
1'
b00000100 +
b00000101 6
1:
#207
0:
#208
0'
b00000101 +
b00000001 6
1:
#209
0:
#210
1)
b00000001 +
b00000010 6
1:
#211
0:
#212
1$
b00000010 +
b00000011 6
1:
#213
0:
#214
1#
0$
0)
b00000011 +
b00000100 6
1:
#215
0:
#216
0#
1'
b00000100 +
b00000101 6
1:
#217
0:
#218
0'
b00000101 +
b00000001 6
1:
#219
0:
#220
1)
b00000001 +
b00000010 6
1:
#221
0:
#222
1$
b00000010 +
b00000011 6
1:
#223
0:
#224
1#
0$
0)
b00000011 +
b00000100 6
1:
#225
0:
#226
0#
1'
b00000100 +
b00000101 6
1:
#227
0:
#228
0'
b00000101 +
b00000001 6
1:
#229
0:
#230
1)
b00000001 +
b00000010 6
1:
#231
0:
#232
1$
b00000010 +
b00000011 6
1:
#233
0:
#234
1#
0$
0)
b00000011 +
b00000100 6
1:
#235
0:
#236
0#
1'
b00000100 +
b00000101 6
1:
#237
0:
#238
0'
b00000101 +
b00000001 6
1:
#239
0:
#240
1)
b00000001 +
b00000010 6
1:
#241
0:
#242
1$
b00000010 +
b00000011 6
1:
#243
0:
#244
1#
0$
0)
b00000011 +
b00000100 6
1:
#245
0:
#246
0#
1'
b00000100 +
b00000101 6
1:
#247
0:
#248
0'
b00000101 +
b00000001 6
1:
#249
0:
#250
1)
b00000001 +
b00000010 6
1:
#251
0:
#252
1$
b00000010 +
b00000011 6
1:
#253
0:
#254
1#
0$
0)
b00000011 +
b00000100 6
1:
#255
0:
#256
0#
1'
b00000100 +
b00000101 6
1:
#257
0:
#258
0'
b00000101 +
b00000001 6
1:
#259
0:
#260
1)
b00000001 +
b00000010 6
1:
#261
0:
#262
1$
b00000010 +
b00000011 6
1:
#263
0:
#264
1#
0$
0)
b00000011 +
b00000100 6
1:
#265
0:
#266
0#
1'
b00000100 +
b00000101 6
1:
#267
0:
#268
0'
b00000101 +
b00000001 6
1:
#269
0:
#270
1)
b00000001 +
b00000010 6
1:
#271
0:
#272
1$
b00000010 +
b00000011 6
1:
#273
0:
#274
1#
0$
0)
b00000011 +
b00000100 6
1:
#275
0:
#276
0#
1'
b00000100 +
b00000101 6
1:
#277
0:
#278
0'
b00000101 +
b00000001 6
1:
#279
0:
#280
1)
b00000001 +
b00000010 6
1:
#281
0:
#282
1$
b00000010 +
b00000011 6
1:
#283
0:
#284
1#
0$
0)
b00000011 +
b00000100 6
1:
#285
0:
#286
0#
1'
b00000100 +
b00000101 6
1:
#287
0:
#288
0'
b00000101 +
b00000001 6
1:
#289
0:
#290
1)
b00000001 +
b00000010 6
1:
#291
0:
#292
1$
b00000010 +
b00000011 6
1:
#293
0:
#294
1#
0$
0)
b00000011 +
b00000100 6
1:
#295
0:
#296
0#
1'
b00000100 +
b00000101 6
1:
#297
0:
#298
0'
b00000101 +
b00000001 6
1:
#299
0:
