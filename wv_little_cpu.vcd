$version Generated by VerilatedVcd $end
$timescale 1ps $end
 $scope module TOP $end
  $scope module $unit $end
   $var wire 8 C OP_noop [7:0] $end
   $var wire 8 D OP_add [7:0] $end
   $var wire 8 E OP_xor [7:0] $end
   $var wire 8 H OP_jmp [7:0] $end
   $var wire 32 S ALU_XOR [31:0] $end
   $var wire 32 T ALU_ADD [31:0] $end
  $upscope $end
  $var wire 1 > i_clk $end
  $var wire 1 ? i_rst $end
  $scope module little_cpu $end
   $var wire 32 @ BITS [31:0] $end
   $var wire 1 > i_clk $end
   $var wire 1 ? i_rst $end
   $var wire 16 # mdr_reg_out [15:0] $end
   $var wire 16 $ inst_reg_out [15:0] $end
   $var wire 8 % pc_mx_wire [7:0] $end
   $var wire 8 & pc_out [7:0] $end
   $var wire 8 ' accum_out [7:0] $end
   $var wire 1 ( acc_zero $end
   $var wire 1 ) ld_mdr $end
   $var wire 1 * ld_mar $end
   $var wire 1 + ld_pc $end
   $var wire 1 , ld_acc $end
   $var wire 1 - ld_ir $end
   $var wire 1 A mem_rw $end
   $var wire 1 . mx_pc_ab $end
   $var wire 1 / mx_mar_ab $end
   $var wire 1 0 mx_accum_ab $end
   $var wire 1 1 alu_ctrl $end
   $var wire 8 2 p1_mx_wire [7:0] $end
   $var wire 8 3 mx_ir_pc_mem_wire [7:0] $end
   $var wire 8 4 mar_to_mem_module_wire [7:0] $end
   $var wire 16 5 mem_to_mdr_reg_wire [15:0] $end
   $var wire 8 6 mx_to_accum_wire [7:0] $end
   $var wire 8 7 alu_out_wire [7:0] $end
   $scope module accum $end
    $var wire 32 B BITS [31:0] $end
    $var wire 1 > i_clk $end
    $var wire 1 , i_ld $end
    $var wire 8 6 i_data [7:0] $end
    $var wire 8 ' o_data [7:0] $end
    $var wire 1 ( o_zero $end
    $var wire 8 ' value [7:0] $end
   $upscope $end
   $scope module alu $end
    $var wire 32 B BITS [31:0] $end
    $var wire 1 1 i_op $end
    $var wire 8 8 i_l [7:0] $end
    $var wire 8 ' i_r [7:0] $end
    $var wire 8 7 o_out [7:0] $end
   $upscope $end
   $scope module ctrl $end
    $var wire 8 9 i_opcode [7:0] $end
    $var wire 1 > i_clk $end
    $var wire 1 ? i_rst $end
    $var wire 1 ( i_acc_zero $end
    $var wire 1 A o_mem_rw $end
    $var wire 1 ) o_ld_mdr $end
    $var wire 1 * o_ld_mar $end
    $var wire 1 + o_ld_pc $end
    $var wire 1 , o_ld_acc $end
    $var wire 1 - o_ld_ir $end
    $var wire 1 . o_mux_PC_to_ir_p1 $end
    $var wire 1 0 o_mux_ACC_to_mdr_alur $end
    $var wire 1 / o_mux_MAR_to_pc_ird $end
    $var wire 1 1 o_alu_ctrl $end
    $var wire 8 C S_Fetch_0 [7:0] $end
    $var wire 8 D S_Fetch_1 [7:0] $end
    $var wire 8 E S_Fetch_2 [7:0] $end
    $var wire 8 F S_Fetch_3 [7:0] $end
    $var wire 8 G S_Fetch_4 [7:0] $end
    $var wire 8 H S_Inc_0 [7:0] $end
    $var wire 8 I S_Inc_1 [7:0] $end
    $var wire 8 J S_Exe_Alu_0 [7:0] $end
    $var wire 8 K S_Exe_Alu_1 [7:0] $end
    $var wire 8 L S_Exe_Alu_2 [7:0] $end
    $var wire 8 M S_Exe_Alu_3 [7:0] $end
    $var wire 8 N S_Exe_Alu_4 [7:0] $end
    $var wire 8 O S_Jmp_0 [7:0] $end
    $var wire 8 P S_Jmp_1 [7:0] $end
    $var wire 8 Q S_Jmp_2 [7:0] $end
    $var wire 8 : current_state [7:0] $end
    $var wire 8 ; next_state [7:0] $end
   $upscope $end
   $scope module inst_reg $end
    $var wire 32 @ BITS [31:0] $end
    $var wire 1 > i_clk $end
    $var wire 1 - i_ld $end
    $var wire 16 # i_data [15:0] $end
    $var wire 16 $ o_data [15:0] $end
    $var wire 16 $ value [15:0] $end
   $upscope $end
   $scope module mem $end
    $var wire 32 @ BITS [31:0] $end
    $var wire 32 R MEMADDRS [31:0] $end
    $var wire 1 > i_clk $end
    $var wire 1 A i_rw $end
    $var wire 16 < i_data [15:0] $end
    $var wire 8 4 i_addr [7:0] $end
    $var wire 16 5 o_data [15:0] $end
   $upscope $end
   $scope module mem_addr_reg $end
    $var wire 32 B BITS [31:0] $end
    $var wire 1 > i_clk $end
    $var wire 1 * i_ld $end
    $var wire 8 3 i_data [7:0] $end
    $var wire 8 4 o_data [7:0] $end
    $var wire 8 4 value [7:0] $end
   $upscope $end
   $scope module mem_data_reg $end
    $var wire 32 @ BITS [31:0] $end
    $var wire 1 > i_clk $end
    $var wire 1 ) i_ld $end
    $var wire 16 5 i_data [15:0] $end
    $var wire 16 # o_data [15:0] $end
    $var wire 16 # value [15:0] $end
   $upscope $end
   $scope module mx_alur_mdr $end
    $var wire 32 B BITS [31:0] $end
    $var wire 1 0 i_ab_sw $end
    $var wire 8 7 i_a [7:0] $end
    $var wire 8 8 i_b [7:0] $end
    $var wire 8 6 o_out [7:0] $end
   $upscope $end
   $scope module mx_ir_pc $end
    $var wire 32 B BITS [31:0] $end
    $var wire 1 / i_ab_sw $end
    $var wire 8 = i_a [7:0] $end
    $var wire 8 & i_b [7:0] $end
    $var wire 8 3 o_out [7:0] $end
   $upscope $end
   $scope module mx_p1_inst_rg $end
    $var wire 32 B BITS [31:0] $end
    $var wire 1 . i_ab_sw $end
    $var wire 8 2 i_a [7:0] $end
    $var wire 8 = i_b [7:0] $end
    $var wire 8 % o_out [7:0] $end
   $upscope $end
   $scope module pc_plus_one $end
    $var wire 32 B BITS [31:0] $end
    $var wire 8 & in [7:0] $end
    $var wire 8 2 out [7:0] $end
   $upscope $end
   $scope module prog_ctr $end
    $var wire 32 B BITS [31:0] $end
    $var wire 1 > i_clk $end
    $var wire 1 + i_ld $end
    $var wire 8 % i_data [7:0] $end
    $var wire 8 & o_data [7:0] $end
    $var wire 8 & value [7:0] $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
b0000000000000000 #
b0000000000000000 $
b00000000 %
b00000000 &
b00000000 '
1(
0)
0*
0+
0,
0-
0.
0/
00
01
b00000001 2
b00000000 3
b00000000 4
b0000000010000001 5
b00000000 6
b00000000 7
b00000000 8
b00000000 9
b00000000 :
b00000001 ;
b0000000000000000 <
b00000000 =
1>
0?
b00000000000000000000000000010000 @
0A
b00000000000000000000000000001000 B
b00000000 C
b00000001 D
b00000010 E
b00000011 F
b00000100 G
b00000101 H
b00000110 I
b00001001 J
b00001010 K
b00001011 L
b00001100 M
b00001101 N
b00001111 O
b00010000 P
b00010001 Q
b00000000000000000000000100000000 R
b00000000000000000000000000000001 S
b00000000000000000000000000000000 T
#1
0>
#2
1*
b00000001 :
b00000010 ;
1>
#3
0>
#4
1)
0*
b00000010 :
b00000011 ;
1>
#5
0>
#6
b0000000010000001 #
0)
1-
b10000001 6
b10000001 7
b10000001 8
b00000011 :
b00000100 ;
1>
#7
0>
#8
b0000000010000001 $
b00000001 %
0-
b00000100 :
b00000101 ;
b00000001 =
1>
#9
0>
#10
1.
b00000101 :
b00000110 ;
1>
#11
0>
#12
1+
b00000110 :
b00000000 ;
1>
#13
0>
#14
b00000001 &
0+
0.
b00000010 2
b00000001 3
b00000000 :
b00000001 ;
1>
#15
0>
#16
1*
b00000001 :
b00000010 ;
1>
#17
0>
#18
1)
0*
b00000001 4
b0000000100000000 5
b00000010 :
b00000011 ;
1>
#19
0>
#20
b0000000100000000 #
0)
1-
b00000000 6
b00000000 7
b00000000 8
b00000011 :
b00000100 ;
1>
#21
0>
#22
b0000000100000000 $
b00000010 %
0-
b00000001 9
b00000100 :
b00001001 ;
b00000010 =
1>
#23
0>
#24
1/
b00000010 3
b00001001 :
b00001010 ;
1>
#25
0>
#26
1*
b00001010 :
b00001011 ;
1>
#27
0>
#28
1)
0*
0/
10
b00000001 3
b00000010 4
b0000010100000000 5
b00001011 :
b00001100 ;
1>
#29
0>
#30
b0000010100000000 #
0)
1,
b00001100 :
b00001101 ;
1>
#31
0>
#32
0,
00
b00001101 :
b00000101 ;
1>
#33
0>
#34
1.
b00000101 :
b00000110 ;
1>
#35
0>
#36
1+
b00000110 :
b00000000 ;
1>
#37
0>
#38
b00000010 &
0+
0.
b00000011 2
b00000010 3
b00000000 :
b00000001 ;
1>
#39
0>
#40
1*
b00000001 :
b00000010 ;
1>
#41
0>
#42
1)
0*
b00000010 :
b00000011 ;
1>
#43
0>
#44
0)
1-
b00000011 :
b00000100 ;
1>
#45
0>
#46
b0000010100000000 $
b00001010 %
0-
b00000101 9
b00000100 :
b00001111 ;
b00001010 =
1>
#47
0>
#48
b00001111 :
b00010000 ;
1>
#49
0>
#50
1+
b00010000 :
b00010001 ;
1>
#51
0>
#52
b00001010 &
0+
b00001011 2
b00001010 3
b00010001 :
b00000100 ;
1>
#53
0>
#54
b00000100 :
b00001111 ;
1>
#55
0>
#56
b00001111 :
b00010000 ;
1>
#57
0>
#58
1+
b00010000 :
b00010001 ;
1>
#59
0>
#60
0+
b00010001 :
b00000100 ;
1>
#61
0>
#62
b00000100 :
b00001111 ;
1>
#63
0>
#64
b00001111 :
b00010000 ;
1>
#65
0>
#66
1+
b00010000 :
b00010001 ;
1>
#67
0>
#68
0+
b00010001 :
b00000100 ;
1>
#69
0>
#70
b00000100 :
b00001111 ;
1>
#71
0>
#72
b00001111 :
b00010000 ;
1>
#73
0>
#74
1+
b00010000 :
b00010001 ;
1>
#75
0>
#76
0+
b00010001 :
b00000100 ;
1>
#77
0>
#78
b00000100 :
b00001111 ;
1>
#79
0>
#80
b00001111 :
b00010000 ;
1>
#81
0>
#82
1+
b00010000 :
b00010001 ;
1>
#83
0>
#84
0+
b00010001 :
b00000100 ;
1>
#85
0>
#86
b00000100 :
b00001111 ;
1>
#87
0>
#88
b00001111 :
b00010000 ;
1>
#89
0>
#90
1+
b00010000 :
b00010001 ;
1>
#91
0>
#92
0+
b00010001 :
b00000100 ;
1>
#93
0>
#94
b00000100 :
b00001111 ;
1>
#95
0>
#96
b00001111 :
b00010000 ;
1>
#97
0>
#98
1+
b00010000 :
b00010001 ;
1>
#99
0>
#100
0+
b00010001 :
b00000100 ;
1>
#101
0>
#102
b00000100 :
b00001111 ;
1>
#103
0>
#104
b00001111 :
b00010000 ;
1>
#105
0>
#106
1+
b00010000 :
b00010001 ;
1>
#107
0>
#108
0+
b00010001 :
b00000100 ;
1>
#109
0>
#110
b00000100 :
b00001111 ;
1>
#111
0>
#112
b00001111 :
b00010000 ;
1>
#113
0>
#114
1+
b00010000 :
b00010001 ;
1>
#115
0>
#116
0+
b00010001 :
b00000100 ;
1>
#117
0>
#118
b00000100 :
b00001111 ;
1>
#119
0>
#120
b00001111 :
b00010000 ;
1>
#121
0>
#122
1+
b00010000 :
b00010001 ;
1>
#123
0>
#124
0+
b00010001 :
b00000100 ;
1>
#125
0>
#126
b00000100 :
b00001111 ;
1>
#127
0>
#128
b00001111 :
b00010000 ;
1>
#129
0>
#130
1+
b00010000 :
b00010001 ;
1>
#131
0>
#132
0+
b00010001 :
b00000100 ;
1>
#133
0>
#134
b00000100 :
b00001111 ;
1>
#135
0>
#136
b00001111 :
b00010000 ;
1>
#137
0>
#138
1+
b00010000 :
b00010001 ;
1>
#139
0>
#140
0+
b00010001 :
b00000100 ;
1>
#141
0>
#142
b00000100 :
b00001111 ;
1>
#143
0>
#144
b00001111 :
b00010000 ;
1>
#145
0>
#146
1+
b00010000 :
b00010001 ;
1>
#147
0>
#148
0+
b00010001 :
b00000100 ;
1>
#149
0>
#150
b00000100 :
b00001111 ;
1>
#151
0>
#152
b00001111 :
b00010000 ;
1>
#153
0>
#154
1+
b00010000 :
b00010001 ;
1>
#155
0>
#156
0+
b00010001 :
b00000100 ;
1>
#157
0>
#158
b00000100 :
b00001111 ;
1>
#159
0>
#160
b00001111 :
b00010000 ;
1>
#161
0>
#162
1+
b00010000 :
b00010001 ;
1>
#163
0>
#164
0+
b00010001 :
b00000100 ;
1>
#165
0>
#166
b00000100 :
b00001111 ;
1>
#167
0>
#168
b00001111 :
b00010000 ;
1>
#169
0>
#170
1+
b00010000 :
b00010001 ;
1>
#171
0>
#172
0+
b00010001 :
b00000100 ;
1>
#173
0>
#174
b00000100 :
b00001111 ;
1>
#175
0>
#176
b00001111 :
b00010000 ;
1>
#177
0>
#178
1+
b00010000 :
b00010001 ;
1>
#179
0>
#180
0+
b00010001 :
b00000100 ;
1>
#181
0>
#182
b00000100 :
b00001111 ;
1>
#183
0>
#184
b00001111 :
b00010000 ;
1>
#185
0>
#186
1+
b00010000 :
b00010001 ;
1>
#187
0>
#188
0+
b00010001 :
b00000100 ;
1>
#189
0>
#190
b00000100 :
b00001111 ;
1>
#191
0>
#192
b00001111 :
b00010000 ;
1>
#193
0>
#194
1+
b00010000 :
b00010001 ;
1>
#195
0>
#196
0+
b00010001 :
b00000100 ;
1>
#197
0>
#198
b00000100 :
b00001111 ;
1>
#199
0>
#200
b00001111 :
b00010000 ;
1>
#201
0>
#202
1+
b00010000 :
b00010001 ;
1>
#203
0>
#204
0+
b00010001 :
b00000100 ;
1>
#205
0>
#206
b00000100 :
b00001111 ;
1>
#207
0>
#208
b00001111 :
b00010000 ;
1>
#209
0>
#210
1+
b00010000 :
b00010001 ;
1>
#211
0>
#212
0+
b00010001 :
b00000100 ;
1>
#213
0>
#214
b00000100 :
b00001111 ;
1>
#215
0>
#216
b00001111 :
b00010000 ;
1>
#217
0>
#218
1+
b00010000 :
b00010001 ;
1>
#219
0>
#220
0+
b00010001 :
b00000100 ;
1>
#221
0>
#222
b00000100 :
b00001111 ;
1>
#223
0>
#224
b00001111 :
b00010000 ;
1>
#225
0>
#226
1+
b00010000 :
b00010001 ;
1>
#227
0>
#228
0+
b00010001 :
b00000100 ;
1>
#229
0>
#230
b00000100 :
b00001111 ;
1>
#231
0>
#232
b00001111 :
b00010000 ;
1>
#233
0>
#234
1+
b00010000 :
b00010001 ;
1>
#235
0>
#236
0+
b00010001 :
b00000100 ;
1>
#237
0>
#238
b00000100 :
b00001111 ;
1>
#239
0>
#240
b00001111 :
b00010000 ;
1>
#241
0>
#242
1+
b00010000 :
b00010001 ;
1>
#243
0>
#244
0+
b00010001 :
b00000100 ;
1>
#245
0>
#246
b00000100 :
b00001111 ;
1>
#247
0>
#248
b00001111 :
b00010000 ;
1>
#249
0>
#250
1+
b00010000 :
b00010001 ;
1>
#251
0>
#252
0+
b00010001 :
b00000100 ;
1>
#253
0>
#254
b00000100 :
b00001111 ;
1>
#255
0>
#256
b00001111 :
b00010000 ;
1>
#257
0>
#258
1+
b00010000 :
b00010001 ;
1>
#259
0>
#260
0+
b00010001 :
b00000100 ;
1>
#261
0>
#262
b00000100 :
b00001111 ;
1>
#263
0>
#264
b00001111 :
b00010000 ;
1>
#265
0>
#266
1+
b00010000 :
b00010001 ;
1>
#267
0>
#268
0+
b00010001 :
b00000100 ;
1>
#269
0>
#270
b00000100 :
b00001111 ;
1>
#271
0>
#272
b00001111 :
b00010000 ;
1>
#273
0>
#274
1+
b00010000 :
b00010001 ;
1>
#275
0>
#276
0+
b00010001 :
b00000100 ;
1>
#277
0>
#278
b00000100 :
b00001111 ;
1>
#279
0>
#280
b00001111 :
b00010000 ;
1>
#281
0>
#282
1+
b00010000 :
b00010001 ;
1>
#283
0>
#284
0+
b00010001 :
b00000100 ;
1>
#285
0>
#286
b00000100 :
b00001111 ;
1>
#287
0>
#288
b00001111 :
b00010000 ;
1>
#289
0>
#290
1+
b00010000 :
b00010001 ;
1>
#291
0>
#292
0+
b00010001 :
b00000100 ;
1>
#293
0>
#294
b00000100 :
b00001111 ;
1>
#295
0>
#296
b00001111 :
b00010000 ;
1>
#297
0>
#298
1+
b00010000 :
b00010001 ;
1>
#299
0>
